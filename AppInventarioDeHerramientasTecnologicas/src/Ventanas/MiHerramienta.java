/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import ConexionBD.ConexionHerramientas;
import Datos.Herramienta;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author ASUS
 */
public class MiHerramienta extends javax.swing.JFrame {

    /**
     * Creates new form MiHerramienta
     */
    public MiHerramienta() {
        initComponents();
        cargarHerramientasDesdeBaseDeDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btonCancelar = new javax.swing.JButton();
        botonBuscar = new javax.swing.JButton();
        botonEditar = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        botonAtras = new javax.swing.JButton();
        BotonLimpiarCampos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));

        jPanel2.setBackground(new java.awt.Color(0, 51, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "Datos de Herramienta", 0, 0, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Codigo:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Nombre:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Precio:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Cantidad:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(46, 46, 46)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                    .addComponent(txtNombre)
                    .addComponent(txtPrecio)
                    .addComponent(txtCantidad))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 204));
        jLabel2.setText("FORMULARIO PARA GESTIONAR USUARIOS");

        btonCancelar.setBackground(new java.awt.Color(0, 0, 204));
        btonCancelar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btonCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btonCancelar.setText("Cancelar");
        btonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btonCancelarActionPerformed(evt);
            }
        });

        botonBuscar.setBackground(new java.awt.Color(0, 0, 204));
        botonBuscar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        botonBuscar.setForeground(new java.awt.Color(255, 255, 255));
        botonBuscar.setText("Buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        botonEditar.setBackground(new java.awt.Color(0, 0, 204));
        botonEditar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        botonEditar.setForeground(new java.awt.Color(255, 255, 255));
        botonEditar.setText("Editar");
        botonEditar.setAutoscrolls(true);
        botonEditar.setBorderPainted(false);
        botonEditar.setEnabled(false);
        botonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarActionPerformed(evt);
            }
        });

        botonEliminar.setBackground(new java.awt.Color(0, 0, 204));
        botonEliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        botonEliminar.setForeground(new java.awt.Color(255, 255, 255));
        botonEliminar.setText("Eliminar");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        botonAtras.setBackground(new java.awt.Color(0, 0, 204));
        botonAtras.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        botonAtras.setForeground(new java.awt.Color(255, 255, 255));
        botonAtras.setText("Atras");
        botonAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAtrasActionPerformed(evt);
            }
        });

        BotonLimpiarCampos.setBackground(new java.awt.Color(0, 0, 255));
        BotonLimpiarCampos.setText("Limpiar");
        BotonLimpiarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonLimpiarCamposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(botonAtras)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(BotonLimpiarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btonCancelar)
                .addGap(53, 53, 53)
                .addComponent(botonEliminar)
                .addGap(59, 59, 59)
                .addComponent(botonEditar)
                .addGap(45, 45, 45)
                .addComponent(botonBuscar)
                .addGap(37, 37, 37))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btonCancelar)
                            .addComponent(botonBuscar)
                            .addComponent(botonEditar)
                            .addComponent(botonEliminar)
                            .addComponent(BotonLimpiarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(botonAtras))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarHerramientasDesdeBaseDeDatos() {
        try {
            // Recuperar las herramientas de la base de datos
            ArrayList<Herramienta> herramientasBD = ConexionHerramientas.recuperarHerramientasDeBD();

            // Establecer las herramientas recuperadas en la clase Herramienta
            Herramienta.setHerramientaBD(herramientasBD);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al cargar herramientas desde la base de datos: " + e.getMessage());
        }
}
    private void btonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btonCancelarActionPerformed
        int opcion = JOptionPane.showConfirmDialog(null, "¿Desea cerrar la ventana?", "OJO - CONFIRMAR",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (opcion == JOptionPane.YES_OPTION) {
            //guardarDatosEnArchivo();  // Guardar datos antes de cerrar la ventana
            this.dispose();
        }
    }//GEN-LAST:event_btonCancelarActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
           // Recuperar el código del formulario
        String codigoStr = txtCodigo.getText();

        // Verificamos si el campo de código está vacío
        if (codigoStr.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese el código de la herramienta a consultar.");
            return;
        }

        try {
            double codigo = Double.parseDouble(codigoStr);

            // Verificamos si la Base de Datos está vacía
            if (Herramienta.getHerramientaBD() == null || Herramienta.getHerramientaBD().isEmpty()) {
                JOptionPane.showMessageDialog(null, "No existen herramientas en la Base de Datos");
            } else {
                // Buscamos la herramienta en el ArrayList por código
                Herramienta herramientaEncontrada = null;
                for (Herramienta herramienta : Herramienta.getHerramientaBD()) {
                    if (herramienta.getCodigo() == codigo) {
                        herramientaEncontrada = herramienta;
                        break;
                    }
                }

                if (herramientaEncontrada != null) {
                    // Herramienta encontrada, actualizamos los campos
                    txtNombre.setText(herramientaEncontrada.getNombre());
                    txtPrecio.setText(String.valueOf(herramientaEncontrada.getPrecio()));
                    txtCantidad.setText(String.valueOf(herramientaEncontrada.getCantidad()));
                    botonEditar.setEnabled(true);
                } else {
                    // Herramienta no encontrada, limpiamos los campos
                    JOptionPane.showMessageDialog(null, "No existe una herramienta con ese código en la Base de Datos");
                    limpiarCampos();
                    botonEditar.setEnabled(false);
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El código debe ser un número válido");
        }
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void botonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarActionPerformed

         // Validamos que el campo código tenga algún dato
        String codigoStr = txtCodigo.getText();
        if (codigoStr.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Para editar primero debes buscar los datos de la herramienta que deseas editar");
            limpiarCampos();
            return;
        }

        try {
            double codigo = Double.parseDouble(codigoStr);
            
            // Buscar la herramienta en el ArrayList por código
            Herramienta herramienta = null;
            for (Herramienta h : Herramienta.herramientaBD) {
                if (h.getCodigo() == codigo) {
                    herramienta = h;
                    break;
                }
            }

            // Verificar si la herramienta existe
            if (herramienta == null) {
                JOptionPane.showMessageDialog(null, "La herramienta con el código especificado no existe.");
                return;
            }

            // Obtenemos los datos ingresados desde el formulario
            String nombre = txtNombre.getText();
            String precioStr = txtPrecio.getText();
            String cantidadStr = txtCantidad.getText();

            // Validaciones
            if (nombre.isEmpty()) {
                JOptionPane.showMessageDialog(null, "El nombre no puede estar vacío.");
                return;
            }

            try {
                double precio = Double.parseDouble(precioStr);
                int cantidad = Integer.parseInt(cantidadStr);

                if (precio < 0) {
                    JOptionPane.showMessageDialog(null, "El precio no puede ser negativo.");
                    return;
                }
                if (cantidad < 0) {
                    JOptionPane.showMessageDialog(null, "La cantidad no puede ser negativa.");
                    return;
                }

                // Actualizamos los datos en la base de datos
                ConexionHerramientas.editarDatosHerramienta(codigo, "nombre", nombre);
                ConexionHerramientas.editarDatosHerramienta(codigo, "precio", String.valueOf(precio));
                ConexionHerramientas.editarDatosHerramienta(codigo, "cantidad", String.valueOf(cantidad));

                // Actualizamos el objeto Herramienta en memoria
                herramienta.setNombre(nombre);
                herramienta.setPrecio(precio);
                herramienta.setCantidad(cantidad);

                JOptionPane.showMessageDialog(null, "Datos de la herramienta fueron modificados con éxito");
                limpiarCampos();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El precio y la cantidad deben ser números válidos");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al editar los datos: " + e.getMessage());
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El código debe ser un número válido");
        }
    }//GEN-LAST:event_botonEditarActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
         String codigoStr = txtCodigo.getText();
        if (codigoStr.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Para eliminar primero debe buscar una herramienta");
            limpiarCampos();
            return;
        }

        try {
            double codigo = Double.parseDouble(codigoStr);

            // Buscar la herramienta en el ArrayList
            Herramienta herramientaAEliminar = null;
            for (Herramienta h : Herramienta.herramientaBD) {
                if (h.getCodigo() == codigo) {
                    herramientaAEliminar = h;
                    break;
                }
            }

            if (herramientaAEliminar == null) {
                JOptionPane.showMessageDialog(null, "La herramienta con el código especificado no existe.");
                limpiarCampos();
                return;
            }

            int opcion = JOptionPane.showConfirmDialog(null,
                "¿Seguro deseas eliminar esta herramienta?",
                "CONFIRMAR ELIMINACIÓN",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

            if (opcion == JOptionPane.YES_OPTION) {
                try {
                    // Eliminar herramienta de la base de datos
                    ConexionHerramientas.eliminarHerramienta(codigo);

                    // Eliminar del ArrayList
                    Herramienta.herramientaBD.remove(herramientaAEliminar);

                    JOptionPane.showMessageDialog(null, "Herramienta eliminada exitosamente");

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null,
                        "Error al eliminar la herramienta: " + ex.getMessage());
                }
            }
            limpiarCampos();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El código debe ser un número válido");
        }
    }//GEN-LAST:event_botonEliminarActionPerformed
 
    private void limpiarCampos() {
        txtCodigo.setText("");
        txtNombre.setText("");
        txtPrecio.setText("");
        txtCantidad.setText("");
        botonEditar.setEnabled(false);
    }
    
    private void botonAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAtrasActionPerformed
        this.dispose();
    }//GEN-LAST:event_botonAtrasActionPerformed

    private void BotonLimpiarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonLimpiarCamposActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_BotonLimpiarCamposActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiHerramienta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiHerramienta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiHerramienta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiHerramienta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiHerramienta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonLimpiarCampos;
    private javax.swing.JButton botonAtras;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonEditar;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton btonCancelar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}
